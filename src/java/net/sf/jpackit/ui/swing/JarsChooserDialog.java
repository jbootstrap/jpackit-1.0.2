/*
 * Copyright 2004-2005 Ignat Aleksandrov, Kamil Shamgunov
 *
 * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package net.sf.jpackit.ui.swing;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.Arrays;
import java.util.List;

/**
 * Jars chooser dialog
 *
 * @author Kamil K. Shamgunov
 */

public class JarsChooserDialog extends javax.swing.JDialog {
    public static final int OK = 0;
    public static final int CANCEL = 1;
    public int retCode;
    private String baseDir;
    private List jarsList;
    private ArrayListListModel listModel;


    /**
     * Creates new form JarsChooserDialog
     */
    public JarsChooserDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jarsJList = new javax.swing.JList();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Jar selector dialog");
        setResizable(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102)), java.util.ResourceBundle.getBundle("net/sf/jpackit/ui/swing/messages").getString("jars_chooser_panel_title")));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 300));
        addButton.setText(java.util.ResourceBundle.getBundle("net/sf/jpackit/ui/swing/messages").getString("add_button"));
        addButton.setActionCommand("add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(addButton, gridBagConstraints);

        deleteButton.setText(java.util.ResourceBundle.getBundle("net/sf/jpackit/ui/swing/messages").getString("delete_button"));
        deleteButton.setActionCommand("delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(deleteButton, gridBagConstraints);

        okButton.setText("Ok");
        okButton.setActionCommand("ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(okButton, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 250));
        jScrollPane1.setViewportView(jarsJList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.setActionCommand("cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(cancelButton, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        retCode = CANCEL;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int[] indices = jarsJList.getSelectedIndices();
        Arrays.sort(indices);
        for (int i = indices.length - 1; i >= 0; i--) {
            int index = indices[i];
            if (index != -1) {
                listModel.removeElementAt(index);
            }
        }
        jarsJList.clearSelection();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        File baseDirFile = new File(baseDir);
        RelativeFileSystemView fsv = new RelativeFileSystemView(baseDirFile);
        JFileChooser fileChooser = new SafeFileChooser(baseDirFile, fsv);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setMultiSelectionEnabled(true);

        fileChooser.setFileFilter(new FileFilter() {
            public String getDescription() {
                return "Jar files";
            }

            public boolean accept(File file) {
                if (file.getName().endsWith(".jar") || file.isDirectory())
                    return true;
                else
                    return false;
            }
        });
        if (JFileChooser.APPROVE_OPTION == fileChooser.showDialog(this,java.util.ResourceBundle.getBundle("net/sf/jpackit/ui/swing/messages").getString("select_title"))) {
            File[] files = fileChooser.getSelectedFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].getAbsolutePath().endsWith(".jar")) {
                    listModel.addElement(Util.calculateRelativePath(baseDir, files[i].getPath()));
                }
            }
            listModel.sort();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        retCode = OK;
        setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JarsChooserDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }

    public String getBaseDir() {
        return baseDir;
    }

    public void setBaseDir(String baseDir) {
        this.baseDir = baseDir;
    }

    public int showDialog() {
        setLocationRelativeTo(getParent());
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                retCode = CANCEL;
            }
        });
        this.setVisible(true);
        return retCode;
    }

    public List getJarsList() {
        return jarsList;
    }

    public void setJarsList(List jarsList) {
        this.jarsList = jarsList;
        listModel = new ArrayListListModel(jarsList);
        jarsJList.setModel(listModel);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList jarsJList;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

}


/*
 * $Log: JarsChooserDialog.java,v $
 * Revision 1.9  2005/02/07 13:11:05  kamil_sham
 * Moved all messages into resource bundle
 *
 * Revision 1.8  2005/01/24 19:03:30  kamil_sham
 * Added kunststoff look and feel, removed resizing from all windows.
 *
 * Revision 1.7  2005/01/24 13:23:35  ignath
 * Refactored code
 *
 * Revision 1.6  2005/01/21 17:44:02  kamil_sham
 * Fixed many bugs, added sorting to ArrayListModel
 *
 * Revision 1.5  2005/01/14 06:15:07  kamil_sham
 * Fixed some bugs
 *
 * Revision 1.4  2005/01/13 07:35:16  kamil_sham
 * Fixed several bugs and added validation support in ui
 *
 * Revision 1.3  2005/01/13 05:57:36  kamil_sham
 * Fixed bug 1100901 Jar location chooser multiple operation is missing. Added multiple selection support,
 *
 * Revision 1.2  2005/01/12 15:04:25  ignath
 * Added jars validation and main class validation to BuildConfigurationValidator.

 * Replaced ArrayList to interface List where it was appropriate.
 *
 * Revision 1.1  2005/01/12 09:25:47  kamil_sham
 * *** empty log message ***
 *
 * Revision 1.3  2005/01/11 12:12:04  ignath
 * Added good file header and footer
 *
 */